// modules/email.js - ENHANCED EMAIL MODULE WITH CLAUDE API
const { exec } = require('child_process');
const path = require('path');
const os = require('os');

const DESKTOP_PATH = path.join(os.homedir(), 'Desktop');

// Enhanced email handling with Claude API
async function handleSmartEmail(message, claudeModule) {
    console.log('üìß Enhanced email processing with Claude API...');
    
    try {
        // Step 1: Parse email details (with Claude if available)
        const emailDetails = await claudeModule.parseEmailWithClaude(message);
        console.log('üìã Email details parsed:', emailDetails);
        
        // Step 2: Generate smart content with Claude API
        const contentResult = await claudeModule.generateEmailContent(
            message, 
            emailDetails.to, 
            emailDetails.subject
        );
        
        let emailBody;
        let generationMethod;
        
        if (contentResult.success) {
            emailBody = contentResult.content;
            generationMethod = 'ü§ñ Generated by Claude API';
            console.log('‚úÖ Claude API generated email content');
        } else {
            emailBody = contentResult.fallback;
            generationMethod = '‚ö†Ô∏è Claude API failed, using fallback template';
            console.log('‚ùå Claude API failed, using fallback');
        }
        
        // Step 3: Create comprehensive email package
        const finalEmailDetails = {
            to: emailDetails.to || extractEmailFromMessage(message),
            subject: emailDetails.subject || 'Generated Email',
            body: emailBody
        };
        
        const result = await createSmartEmailFiles(finalEmailDetails, generationMethod);
        
        return {
            message: 'üìß Smart Email Created with Claude AI',
            details: result
        };
        
    } catch (error) {
        console.log('‚ùå Smart email processing failed, using basic method');
        return await handleBasicEmail(message);
    }
}

// Create enhanced email files with Claude-generated content
async function createSmartEmailFiles(emailDetails, generationMethod) {
    try {
        const timestamp = Date.now();
        const results = [];
        
        // 1. Create .eml file with smart content
        const emlContent = createAdvancedEMLFile(emailDetails, generationMethod);
        const emlPath = path.join(DESKTOP_PATH, `SmartEmail_${timestamp}.eml`);
        require('fs').writeFileSync(emlPath, emlContent);
        results.push(`üìß ${path.basename(emlPath)} - Smart email for Outlook`);
        
        // 2. Create enhanced text template
        const txtContent = createEnhancedTextTemplate(emailDetails, generationMethod);
        const txtPath = path.join(DESKTOP_PATH, `SmartEmail_Template_${timestamp}.txt`);
        require('fs').writeFileSync(txtPath, txtContent);
        results.push(`üìù ${path.basename(txtPath)} - Enhanced copy/paste template`);
        
        // 3. Create interactive HTML email
        const htmlContent = createInteractiveHTMLEmail(emailDetails, generationMethod);
        const htmlPath = path.join(DESKTOP_PATH, `SmartEmail_Interactive_${timestamp}.html`);
        require('fs').writeFileSync(htmlPath, htmlContent);
        results.push(`üåê ${path.basename(htmlPath)} - Interactive web email`);
        
        // 4. Try direct Outlook integration (if available)
        const outlookResult = await attemptOutlookIntegration(emailDetails);
        
        return `‚úÖ CLAUDE-ENHANCED EMAIL SOLUTION:

${generationMethod}

üìÅ SMART EMAIL FILES CREATED:
${results.map(r => '‚Ä¢ ' + r).join('\n')}

${outlookResult}

üéØ INTELLIGENT FEATURES:
‚Ä¢ Professional tone and structure
‚Ä¢ Context-aware content generation  
‚Ä¢ Multiple delivery formats
‚Ä¢ Corporate-security friendly

üìß EMAIL DETAILS:
To: ${emailDetails.to}
Subject: ${emailDetails.subject}

ü§ñ CLAUDE AI ADVANTAGES:
‚Ä¢ Understands context and intent
‚Ä¢ Generates professional language
‚Ä¢ Adapts to different email types
‚Ä¢ Maintains consistent quality

üí° USAGE PRIORITY:
1. Try the .eml file (opens directly in Outlook)
2. Use HTML file for web-based email services
3. Copy from text template for manual composition`;
        
    } catch (error) {
        throw new Error(`Smart email file creation failed: ${error.message}`);
    }
}

// Create advanced .eml file with metadata
function createAdvancedEMLFile(emailDetails, generationMethod) {
    const date = new Date().toUTCString();
    const messageId = `<${Date.now()}@windows-assistant.local>`;
    
    return `Message-ID: ${messageId}
Date: ${date}
From: your.email@company.com
To: ${emailDetails.to}
Subject: ${emailDetails.subject}
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
X-Generated-By: Windows Assistant with Claude AI
X-Generation-Method: ${generationMethod}

${emailDetails.body}

---
This email was intelligently generated by Windows Assistant with Claude AI
Generated on: ${new Date().toLocaleString()}`;
}

// Create enhanced text template with instructions
function createEnhancedTextTemplate(emailDetails, generationMethod) {
    return `CLAUDE AI ENHANCED EMAIL TEMPLATE
${'='.repeat(60)}

${generationMethod}
Created: ${new Date().toLocaleString()}

${'='.repeat(60)}

To: ${emailDetails.to}
Subject: ${emailDetails.subject}

${emailDetails.body}

${'='.repeat(60)}

üìã COPY-PASTE INSTRUCTIONS:
1. Select and copy the email content above (To: through the email body)
2. Open your preferred email client:
   ‚Ä¢ Outlook (desktop or web)
   ‚Ä¢ Gmail (gmail.com)
   ‚Ä¢ Yahoo Mail (mail.yahoo.com)
   ‚Ä¢ Any other email service
3. Click "New Email" or "Compose"
4. Paste the content
5. Review and customize if needed
6. Add your signature and send

üåê WEB EMAIL QUICK ACCESS:
‚Ä¢ Gmail: https://gmail.com
‚Ä¢ Outlook.com: https://outlook.live.com
‚Ä¢ Yahoo: https://mail.yahoo.com

ü§ñ AI GENERATION NOTES:
This email was generated using Claude AI, which:
‚Ä¢ Analyzed your request for context and intent
‚Ä¢ Generated professional, appropriate language
‚Ä¢ Structured the content for maximum impact
‚Ä¢ Adapted tone for the specific email type

üí° CUSTOMIZATION TIPS:
‚Ä¢ Add specific dates, names, or details as needed
‚Ä¢ Adjust the tone if required (more formal/casual)
‚Ä¢ Include attachments or additional information
‚Ä¢ Add your personal signature and contact info`;
}

// Create interactive HTML email with Claude features
function createInteractiveHTMLEmail(emailDetails, generationMethod) {
    const subject = encodeURIComponent(emailDetails.subject);
    const body = encodeURIComponent(emailDetails.body);
    const to = emailDetails.to;

    return `<!DOCTYPE html>
<html>
<head>
    <title>Claude AI Enhanced Email</title>
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            max-width: 900px; 
            margin: 20px auto; 
            padding: 20px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container { 
            background: white; 
            padding: 30px; 
            border-radius: 15px; 
            box-shadow: 0 10px 30px rgba(0,0,0,0.2); 
        }
        .header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            text-align: center;
        }
        .ai-badge {
            background: #ff6b6b;
            color: white;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
            display: inline-block;
            margin-bottom: 10px;
        }
        .email-preview { 
            background: #f8f9fa; 
            padding: 25px; 
            border-radius: 10px; 
            margin: 20px 0; 
            border-left: 5px solid #4facfe; 
            font-family: 'Times New Roman', serif;
            line-height: 1.6;
        }
        .button { 
            display: inline-block; 
            background: #4facfe; 
            color: white; 
            padding: 12px 24px; 
            text-decoration: none; 
            border-radius: 25px; 
            margin: 10px 5px; 
            font-weight: bold;
            transition: all 0.3s ease;
        }
        .button:hover { 
            background: #357abd; 
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }
        .button.gmail { background: #ea4335; }
        .button.outlook { background: #0078d4; }
        .button.yahoo { background: #7b0099; }
        .copy-btn { 
            background: #28a745; 
            border: none; 
            color: white; 
            padding: 15px 30px; 
            border-radius: 25px; 
            cursor: pointer; 
            font-size: 16px;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        .copy-btn:hover {
            background: #218838;
            transform: translateY(-2px);
        }
        .stats {
            background: #e9ecef;
            padding: 15px;
            border-radius: 10px;
            margin-top: 20px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="ai-badge">ü§ñ CLAUDE AI POWERED</div>
            <h1>Smart Email Ready to Send</h1>
            <p>${generationMethod}</p>
        </div>
        
        <div class="email-preview">
            <p><strong>To:</strong> ${to}</p>
            <p><strong>Subject:</strong> ${emailDetails.subject}</p>
            <hr style="margin: 15px 0; border: none; border-top: 1px solid #ddd;">
            <div id="emailContent">
                ${emailDetails.body.replace(/\n/g, '<br>')}
            </div>
        </div>
        
        <div style="text-align: center; margin: 30px 0;">
            <button class="copy-btn" onclick="copyEmail()">üìã Copy AI-Generated Email</button>
        </div>
        
        <h3>üåê Open in Web Email Services</h3>
        <p>Click a button below to open your email service with this AI-generated content:</p>
        
        <div style="text-align: center;">
            <a href="https://mail.google.com/mail/u/0/?view=cm&fs=1&to=${to}&su=${subject}&body=${body}" 
               target="_blank" class="button gmail">üìß Gmail</a>
            
            <a href="https://outlook.live.com/mail/0/deeplink/compose?to=${to}&subject=${subject}&body=${body}" 
               target="_blank" class="button outlook">üìß Outlook.com</a>
            
            <a href="https://compose.mail.yahoo.com/?to=${to}&subject=${subject}&body=${body}" 
               target="_blank" class="button yahoo">üìß Yahoo Mail</a>
        </div>
        
        <div class="stats">
            <h4>ü§ñ AI Generation Details</h4>
            <p><strong>Generation Method:</strong> ${generationMethod}</p>
            <p><strong>Content Length:</strong> ${emailDetails.body.length} characters</p>
            <p><strong>Generated:</strong> ${new Date().toLocaleString()}</p>
            <p><strong>Email Type:</strong> Professional correspondence</p>
        </div>
        
        <h3>üí° Next Steps</h3>
        <ol>
            <li><strong>Review Content:</strong> Read through the AI-generated email above</li>
            <li><strong>Choose Method:</strong> Copy text or use web email buttons</li>
            <li><strong>Customize:</strong> Add personal touches, dates, or specific details</li>
            <li><strong>Send:</strong> Review one final time and send your email</li>
        </ol>
        
        <div style="background: #fff3cd; padding: 15px; border-radius: 10px; margin-top: 20px;">
            <h4>üéØ Why Claude AI Makes Better Emails</h4>
            <ul>
                <li>Understands context and generates appropriate tone</li>
                <li>Creates professional, well-structured content</li>
                <li>Adapts to different email types (leave, meetings, general)</li>
                <li>Saves time while maintaining quality</li>
            </ul>
        </div>
    </div>

    <script>
        function copyEmail() {
            const content = document.getElementById('emailContent').innerText;
            const fullEmail = \`To: ${to}
Subject: ${emailDetails.subject}

\${content}\`;
            
            navigator.clipboard.writeText(fullEmail).then(function() {
                alert('‚úÖ AI-generated email copied to clipboard!\\n\\nüìß Ready to paste into any email client.');
            }, function() {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = fullEmail;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                alert('‚úÖ Email content copied! Ready to paste.');
            });
        }
        
        // Show loading message when buttons are clicked
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('button') && e.target.href) {
                const notification = document.createElement('div');
                notification.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #28a745; color: white; padding: 15px; border-radius: 10px; z-index: 1000;';
                notification.textContent = 'üöÄ Opening email service with AI content...';
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    document.body.removeChild(notification);
                }, 3000);
            }
        });
    </script>
</body>
</html>`;
}

// Attempt Outlook integration
async function attemptOutlookIntegration(emailDetails) {
    try {
        return await new Promise((resolve) => {
            const scriptContent = `
try {
    $outlook = New-Object -ComObject Outlook.Application
    $mail = $outlook.CreateItem(0)
    $mail.To = "${emailDetails.to}"
    $mail.Subject = "${emailDetails.subject}"
    $mail.Body = "${emailDetails.body.replace(/"/g, '""')}"
    $mail.Display()
    Write-Host "SUCCESS: Claude AI email opened in Outlook"
} catch {
    Write-Host "FAILED: $($_.Exception.Message)"
}`;

            const tempScript = path.join(os.tmpdir(), `outlook_integration_${Date.now()}.ps1`);
            require('fs').writeFileSync(tempScript, scriptContent);

            exec(`powershell -ExecutionPolicy Bypass -File "${tempScript}"`, (error, stdout, stderr) => {
                try { require('fs').unlinkSync(tempScript); } catch (e) {}
                
                if (stdout && stdout.includes('SUCCESS')) {
                    resolve(`üéâ OUTLOOK INTEGRATION SUCCESS:
‚úÖ Email opened directly in Outlook with Claude AI content!`);
                } else {
                    resolve(`‚ö†Ô∏è OUTLOOK INTEGRATION FAILED:
${stderr || error?.message || 'Outlook not available or blocked'}

üí° No worries! Use the file-based methods above instead.`);
                }
            });
        });
    } catch (error) {
        return `‚ö†Ô∏è Outlook integration error: ${error.message}`;
    }
}

// Fallback to basic email handling
async function handleBasicEmail(message) {
    console.log('üìß Using basic email processing...');
    
    try {
        const emailDetails = parseEmailRequestBasic(message);
        const result = await createBasicEmailFiles(emailDetails);
        
        return {
            message: 'üìß Basic Email Created (Claude API unavailable)',
            details: result
        };
    } catch (error) {
        return {
            message: '‚ùå Email processing failed',
            details: `Error: ${error.message}\n\nPlease configure Claude API key for enhanced email features.`
        };
    }
}

// Basic email parsing (fallback)
function parseEmailRequestBasic(message) {
    const msg = message.toLowerCase();
    let to = '';
    let subject = '';
    let body = '';

    // Extract email address
    const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g;
    const emails = message.match(emailRegex);
    if (emails && emails.length > 0) {
        to = emails[0];
    }

    // Basic email type detection
    if (msg.includes('leave') && (msg.includes('application') || msg.includes('request'))) {
        subject = 'Leave Application Request';
        body = `Dear Sir/Madam,

I would like to request leave from 16th October 2025 to 23rd October 2025 for family vacation.

I will ensure that all my pending work is completed before my leave and will coordinate with my team for any urgent matters during my absence.

I would be grateful if you could approve my leave request.

Thank you for your consideration.`;
    } else if (msg.includes('meeting')) {
        subject = 'Meeting Request';
        body = `Dear Team,

I would like to schedule a meeting to discuss our upcoming projects.

Please let me know your availability.

Thank you.`;
    } else {
        subject = 'General Inquiry';
        body = `Dear Sir/Madam,

I hope this email finds you well.

[Please customize this content based on your specific needs]

Thank you for your time.`;
    }

    return { to: to || 'recipient@company.com', subject, body };
}

// Extract email from message
function extractEmailFromMessage(message) {
    const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g;
    const emails = message.match(emailRegex);
    return emails ? emails[0] : 'recipient@company.com';
}

// Create basic email files
async function createBasicEmailFiles(emailDetails) {
    const timestamp = Date.now();
    
    try {
        const emlContent = createAdvancedEMLFile(emailDetails, '‚ö†Ô∏è Basic template (Claude API not available)');
        const emlPath = path.join(DESKTOP_PATH, `BasicEmail_${timestamp}.eml`);
        require('fs').writeFileSync(emlPath, emlContent);
        
        return `üìß BASIC EMAIL SOLUTION:

üìÅ Email file created: ${path.basename(emlPath)}
üìß To: ${emailDetails.to}
üìã Subject: ${emailDetails.subject}

üí° TO ENABLE AI FEATURES:
Configure your Claude API key for:
‚Ä¢ Intelligent content generation
‚Ä¢ Context-aware responses
‚Ä¢ Professional tone adaptation
‚Ä¢ Multiple email formats

üéØ Current email uses basic template.
For smarter emails, add your Claude API key!`;
        
    } catch (error) {
        throw new Error(`Basic email creation failed: ${error.message}`);
    }
}

module.exports = {
    handleSmartEmail,
    handleBasicEmail,
    createSmartEmailFiles,
    parseEmailRequestBasic
};