// modules/simpleWord.js - SIMPLE WORD ALTERNATIVE THAT ALWAYS WORKS
const path = require('path');
const os = require('os');
const fs = require('fs');

const DESKTOP_PATH = path.join(os.homedir(), 'Desktop');

// Simple document creation that bypasses all automation
async function createDocument(message, claudeModule = null) {
    console.log('üìù Using simple document creation (no automation)...');
    
    try {
        // Parse the request
        const docDetails = parseSimpleRequest(message);
        
        // Try to get AI content if available
        if (claudeModule) {
            try {
                console.log('ü§ñ Attempting to get AI content...');
                const contentResult = await claudeModule.generateDocumentContent(message, docDetails.type);
                if (contentResult.success) {
                    docDetails.content = contentResult.content;
                    docDetails.aiGenerated = true;
                    docDetails.generatedBy = contentResult.generatedBy;
                    console.log('‚úÖ AI content generated successfully');
                }
            } catch (error) {
                console.log('‚ö†Ô∏è AI content generation failed:', error.message);
            }
        }
        
        // Create files using simple, reliable methods
        const result = await createMultipleFormats(docDetails);
        
        return {
            message: 'üìù Document created successfully (simple method)',
            details: result
        };
        
    } catch (error) {
        return {
            message: '‚ùå Document creation failed',
            details: `Error: ${error.message}\n\nTry the manual method below.`
        };
    }
}

// Create multiple document formats
async function createMultipleFormats(docDetails) {
    const timestamp = Date.now();
    const safeName = docDetails.type.replace(/[^a-zA-Z0-9]/g, '_');
    const results = [];
    
    try {
        // Format 1: Simple RTF (best for Word)
        const rtfContent = createSimpleRTF(docDetails);
        const rtfPath = path.join(DESKTOP_PATH, `${safeName}_${timestamp}.rtf`);
        fs.writeFileSync(rtfPath, rtfContent, 'utf8');
        results.push(`üìÑ ${path.basename(rtfPath)} - Rich Text (opens in Word)`);
        
        // Format 2: Clean HTML
        const htmlContent = createCleanHTML(docDetails);
        const htmlPath = path.join(DESKTOP_PATH, `${safeName}_${timestamp}.html`);
        fs.writeFileSync(htmlPath, htmlContent, 'utf8');
        results.push(`üåê ${path.basename(htmlPath)} - Web format (opens in browsers/Word)`);
        
        // Format 3: Plain text with formatting
        const txtContent = createFormattedText(docDetails);
        const txtPath = path.join(DESKTOP_PATH, `${safeName}_${timestamp}.txt`);
        fs.writeFileSync(txtPath, txtContent, 'utf8');
        results.push(`üìù ${path.basename(txtPath)} - Plain text (copy/paste ready)`);
        
        // Format 4: Word-compatible DOCX (using OpenXML)
        try {
            const docxContent = createSimpleDocx(docDetails);
            const docxPath = path.join(DESKTOP_PATH, `${safeName}_${timestamp}.docx`);
            fs.writeFileSync(docxPath, docxContent);
            results.push(`üìÑ ${path.basename(docxPath)} - Word document (experimental)`);
        } catch (e) {
            console.log('DOCX creation failed (this is normal):', e.message);
        }

        return `‚úÖ DOCUMENT CREATED SUCCESSFULLY (Simple Method):

${docDetails.aiGenerated ? `ü§ñ CONTENT GENERATED BY ${docDetails.generatedBy.toUpperCase()}` : 'üìù TEMPLATE CONTENT USED'}

üìÅ FILES CREATED ON DESKTOP:
${results.map(r => '‚Ä¢ ' + r).join('\n')}

üìÑ DOCUMENT DETAILS:
‚Ä¢ Type: ${docDetails.type}
‚Ä¢ Title: ${docDetails.title || 'Untitled'}
‚Ä¢ AI Generated: ${docDetails.aiGenerated ? 'Yes' : 'No'}
‚Ä¢ Content Length: ${docDetails.content.length} characters
‚Ä¢ Created: ${new Date().toLocaleString()}

üéØ HOW TO USE:
1. **BEST**: Double-click the .rtf file ‚Üí Should open in Word
2. **ALTERNATIVE**: Double-click .html file ‚Üí Opens in browser or Word
3. **MANUAL**: Open the .txt file ‚Üí Copy content ‚Üí Paste in Word
4. **DIRECT**: Try double-clicking .docx file if created

üí° OPENING IN WORD:
‚Ä¢ The .rtf file should automatically open in Microsoft Word
‚Ä¢ If it doesn't, right-click ‚Üí "Open with" ‚Üí Microsoft Word  
‚Ä¢ Or open Word first, then File ‚Üí Open ‚Üí select the file

üîß IF FILES DON'T OPEN:
‚Ä¢ Check Desktop for the created files
‚Ä¢ Try opening Word manually first
‚Ä¢ Use copy/paste from the .txt file as backup
‚Ä¢ The content is identical in all formats

‚úÖ THIS METHOD WORKS WITHOUT:
‚Ä¢ COM automation
‚Ä¢ PowerShell scripts  
‚Ä¢ Administrative privileges
‚Ä¢ Corporate security bypasses

The files are ready to use immediately!`;

    } catch (error) {
        return `‚ùå File creation failed: ${error.message}

üìù MANUAL BACKUP METHOD:

Document Type: ${docDetails.type}
Title: ${docDetails.title || 'Untitled'}

Content:
${docDetails.content}

STEPS:
1. Copy the content above
2. Open Notepad (Windows + R ‚Üí notepad ‚Üí Enter)
3. Paste the content (Ctrl + V)
4. Save as "${docDetails.type}.txt" on Desktop
5. Open Microsoft Word
6. Copy content from Notepad and paste into Word
7. Format and save as needed`;
    }
}

// Create simple RTF format
function createSimpleRTF(docDetails) {
    const title = docDetails.title ? docDetails.title.replace(/[{}\\]/g, '') : '';
    const content = docDetails.content
        .replace(/[{}\\]/g, '')
        .replace(/"/g, '')
        .replace(/\n\n/g, '\\par\\par ')
        .replace(/\n/g, '\\par ');
    
    return `{\\rtf1\\ansi\\deff0
{\\fonttbl
{\\f0\\froman Times New Roman;}
{\\f1\\fswiss Arial;}
}
{\\colortbl ;\\red0\\green0\\blue0;}
\\f0\\fs24\\cf1
${title ? `{\\pard\\qc\\f1\\fs28\\b ${title}\\b0\\par\\par}` : ''}
{\\pard\\ql ${content}\\par}
${docDetails.aiGenerated ? `\\par\\par{\\fs18\\i Generated by ${docDetails.generatedBy} on ${new Date().toLocaleDateString()}\\i0\\par}` : ''}
}`;
}

// Create clean HTML
function createCleanHTML(docDetails) {
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${docDetails.title || 'Document'}</title>
    <style>
        body {
            font-family: 'Times New Roman', serif;
            font-size: 12pt;
            line-height: 1.6;
            max-width: 8.5in;
            margin: 1in auto;
            padding: 0 1in;
            background: white;
            color: black;
        }
        h1 {
            text-align: center;
            font-size: 18pt;
            margin-bottom: 1em;
            color: #333;
        }
        p {
            margin-bottom: 1em;
            text-align: justify;
        }
        .footer {
            margin-top: 2em;
            padding-top: 1em;
            border-top: 1px solid #ccc;
            font-size: 10pt;
            color: #666;
            font-style: italic;
        }
        @media print {
            body { margin: 0; }
        }
    </style>
</head>
<body>
    ${docDetails.title ? `<h1>${docDetails.title}</h1>` : ''}
    <div>
        ${docDetails.content.split('\n').map(para => para.trim() ? `<p>${para}</p>` : '').join('')}
    </div>
    ${docDetails.aiGenerated ? `<div class="footer">Generated by ${docDetails.generatedBy} on ${new Date().toLocaleString()}</div>` : ''}
</body>
</html>`;
}

// Create formatted text
function createFormattedText(docDetails) {
    return `${docDetails.title ? docDetails.title.toUpperCase() : 'DOCUMENT'}
${'='.repeat(Math.max(docDetails.title?.length || 8, 40))}

${docDetails.content}

${docDetails.aiGenerated ? `\n---\nGenerated by ${docDetails.generatedBy} on ${new Date().toLocaleString()}` : ''}

${'='.repeat(40)}
INSTRUCTIONS FOR USE IN MICROSOFT WORD:

1. SELECT ALL TEXT ABOVE (Ctrl + A on this content)
2. COPY (Ctrl + C)
3. OPEN MICROSOFT WORD
4. CREATE NEW DOCUMENT (Ctrl + N)
5. PASTE CONTENT (Ctrl + V)
6. FORMAT AS NEEDED:
   ‚Ä¢ Make title bold and larger
   ‚Ä¢ Adjust line spacing
   ‚Ä¢ Set proper margins
   ‚Ä¢ Apply styles as desired
7. SAVE YOUR DOCUMENT (Ctrl + S)

The content above is ready for Word formatting!`;
}

// Attempt simple DOCX creation (basic)
function createSimpleDocx(docDetails) {
    // This creates a very basic Word document structure
    // Note: This is experimental and may not work on all systems
    const content = `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
    <w:body>
        ${docDetails.title ? `
        <w:p>
            <w:pPr>
                <w:jc w:val="center"/>
                <w:rPr>
                    <w:b/>
                    <w:sz w:val="32"/>
                </w:rPr>
            </w:pPr>
            <w:r>
                <w:rPr>
                    <w:b/>
                    <w:sz w:val="32"/>
                </w:rPr>
                <w:t>${docDetails.title}</w:t>
            </w:r>
        </w:p>
        ` : ''}
        ${docDetails.content.split('\n').map(para => 
            para.trim() ? `<w:p><w:r><w:t>${para}</w:t></w:r></w:p>` : '<w:p/>'
        ).join('')}
    </w:body>
</w:document>`;
    
    return content;
}

// Simple request parsing
function parseSimpleRequest(message) {
    const msg = message.toLowerCase();
    
    // Determine document type
    let type = 'Document';
    let title = '';
    let content = '';
    
    if (msg.includes('letter')) {
        type = 'Letter';
        title = 'Letter';
        if (msg.includes('principal')) {
            title = 'Letter to Principal';
            content = `Date: ${new Date().toLocaleDateString()}

To,
The Principal,
[School/College Name]

Subject: [Subject of the Letter]

Dear Sir/Madam,

I am writing this letter to...

Thank you for your consideration.

Yours sincerely,
[Your Name]
[Class/Student ID]`;
        } else {
            content = `Date: ${new Date().toLocaleDateString()}

Dear [Recipient],

I am writing to...

Thank you.

Best regards,
[Your Name]`;
        }
    } else if (msg.includes('essay')) {
        type = 'Essay';
        title = 'Essay';
        content = `Introduction

[Write your introduction paragraph here]

Main Body

[Write your main arguments and supporting evidence here]

Conclusion  

[Summarize your key points here]`;
    } else if (msg.includes('report')) {
        type = 'Report';
        title = 'Report';
        content = `Executive Summary

[Brief overview of the report]

Introduction

[Background and purpose of the report]

Findings

[Main results and observations]

Recommendations

[Suggested actions based on findings]

Conclusion

[Summary of key points]`;
    } else if (msg.includes('resume') || msg.includes('cv')) {
        type = 'Resume';
        title = 'Professional Resume';
        content = `[Your Full Name]
[Address] | [Phone] | [Email]

Professional Summary
[Brief overview of your experience and skills]

Experience
[Job Title] - [Company] ([Years])
‚Ä¢ Key responsibility or achievement
‚Ä¢ Key responsibility or achievement

Education
[Degree] - [School] ([Year])

Skills
‚Ä¢ [Skill 1]
‚Ä¢ [Skill 2]
‚Ä¢ [Skill 3]`;
    } else {
        type = 'Document';
        title = 'New Document';
        content = `This document was created on ${new Date().toLocaleDateString()}

[Start writing your content here]

Main points:
‚Ä¢ Point 1
‚Ä¢ Point 2  
‚Ä¢ Point 3

[Add more content as needed]`;
    }
    
    return {
        type: type,
        title: title,
        content: content,
        aiGenerated: false,
        generatedBy: null
    };
}

// Test if we can write to desktop
function testDesktopAccess() {
    try {
        const testFile = path.join(DESKTOP_PATH, 'test_write.tmp');
        fs.writeFileSync(testFile, 'test');
        fs.unlinkSync(testFile);
        return true;
    } catch (error) {
        return false;
    }
}

// Get user-friendly error message
function getUserFriendlyError(error) {
    if (error.code === 'EACCES') {
        return 'Permission denied. Try running as administrator.';
    } else if (error.code === 'ENOENT') {
        return 'Desktop folder not found or inaccessible.';
    } else if (error.code === 'ENOSPC') {
        return 'Not enough disk space.';
    } else {
        return error.message;
    }
}

// Emergency fallback - create content in user's home directory
async function emergencyFallback(docDetails) {
    try {
        const homeDir = os.homedir();
        const timestamp = Date.now();
        const fileName = `Document_${timestamp}.txt`;
        const filePath = path.join(homeDir, fileName);
        
        const content = `${docDetails.title || 'Document'}
${'='.repeat(40)}

${docDetails.content}

Created: ${new Date().toLocaleString()}
Saved to: ${filePath}

INSTRUCTIONS:
1. Copy this content
2. Open Microsoft Word
3. Paste (Ctrl + V)
4. Format and save as needed`;

        fs.writeFileSync(filePath, content, 'utf8');
        
        return `üö® EMERGENCY DOCUMENT CREATED:

üìÅ Location: ${filePath}
üìù Content: Ready to copy/paste into Word

NEXT STEPS:
1. Open the file at: ${filePath}
2. Select all content (Ctrl + A)
3. Copy (Ctrl + C)
4. Open Microsoft Word
5. Paste (Ctrl + V)
6. Format and save as your document

This bypasses all restrictions and should always work!`;
        
    } catch (error) {
        return `‚ùå All file creation methods failed.

MANUAL CONTENT TO COPY:
${'='.repeat(40)}
${docDetails.title || 'Document'}
${'='.repeat(40)}

${docDetails.content}

${'='.repeat(40)}

MANUAL STEPS:
1. Select and copy all text above
2. Open Notepad (Windows + R ‚Üí notepad)
3. Paste content (Ctrl + V)
4. Save file to Desktop
5. Copy from Notepad to Word when ready

This is the most basic fallback method.`;
    }
}

module.exports = {
    createDocument,
    createMultipleFormats,
    parseSimpleRequest,
    testDesktopAccess,
    emergencyFallback
};